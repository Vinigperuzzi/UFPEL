/* Generated By:JavaCC: Do not edit this line. Karloff.java */
import java.io.*;
import java.util.ArrayList;

class GlobalFlag{
  private static boolean teveEscrita = false;

  public static void setGlobalFlag(boolean valor){
    teveEscrita = valor;
  }

  public static boolean isGlobalFlag(){
    return teveEscrita;
  }
}

class Type {
  String type;

  Type(String type){
    this.type = type;
  }

  public String toString() {
    return this.type;
  }
}

class Variable extends Factor{
  String var;

  Variable(String var){
    this.var = var;
  }

  public String toString() {
    return this.var;
  }
}

class Num extends Factor {
  String num;

  Num(String num) {
    this.num = num;
  }

  public String toString() {
    return this.num;
  }
}

class Factor {}

class True extends Factor {
  String bool = "true";

  public String toString() {
    return this.bool;
  }
}

class False extends Factor {
  String bool = "false";

  public String toString() {
    return this.bool;
  }
}

class FunCall extends Factor{
  String id;
  ArrayList<Expression> listaExp;

  FunCall(String id, ArrayList<Expression> listaExp){
    this.id = id;
    this.listaExp = listaExp;
  }

  public String toString() {
    String funHead = this.id + "(";

    if (!this.listaExp.isEmpty()) {
      Expression fExp = this.listaExp.remove(0);
      funHead = funHead.concat(fExp.toString());

      for (Expression exp : this.listaExp) {
        funHead = funHead.concat("," + exp.toString());
      }
    listaExp.add(0, fExp);
    }

  funHead = funHead + ")";

  return funHead;
  }
}

class Operator {}

class Sum extends Operator {
  String op = "+";

  public String toString() {
    return this.op;
  }
}

class Sub extends Operator {
  String op = "-";

  public String toString() {
    return this.op;
  }
}

class Mult extends Operator {
  String op = "*";

  public String toString() {
    return this.op;
  }
}

class Div extends Operator {
  String op = "/";

  public String toString() {
    return this.op;
  }
}

class And extends Operator {
  String op = "&&";

  public String toString() {
    return this.op;
  }
}

class Or extends Operator {
  String op = "||";

  public String toString() {
    return this.op;
  }
}

class Bigger extends Operator {
  String op = ">";

  public String toString() {
    return this.op;
  }
}

class Smaller extends Operator {
  String op = "<";

  public String toString() {
    return this.op;
  }
}

class Compare extends Operator {
  String op = "==";

  public String toString() {
    return this.op;
  }
}

class Expression {}

class Operation extends Expression {
  Operator operator;
  Expression left, right;

  Operation(Operator operator, Expression left, Expression right){
    this.operator = operator;
    this.left = left;
    this.right = right;
  }

  public String toString() {
    return this.left.toString() + " " + this.operator.toString() + " " + this.right.toString();
  }
}

class ExpressionFinal extends Expression {
  Factor factor;

  ExpressionFinal(Factor factor){
    this.factor = factor;
  }

  public String toString() {
    return this.factor.toString();
  }
}

class Comando {}

class Atrib extends Comando {
  String id;
}

class AtribExp extends Atrib {
  Expression exp;

  AtribExp(String id, Expression exp) {
    this.id = id;
    this.exp = exp;
  }

  public String toString() {
    return this.id + " = " + this.exp.toString() + ";\u005cn";
  }
}

class AtribInput extends Atrib {
  AtribInput(String id) {
    this.id = id;
  }

  public String toString() {
    GlobalFlag.setGlobalFlag(true);
    return this.id + " = parseInt(readlineSync.question(''));\u005cn";
  }
}

class If extends Comando {
  Expression teste;
  ArrayList<Comando> comandos;

  If(Expression teste, ArrayList<Comando> comandos){
    this.teste = teste;
    this.comandos = comandos;
  }

  public String toString() {

    String bodyIf = "if (" + this.teste.toString() + "){\u005cn";

    for (Comando comando : this.comandos) {
      bodyIf = bodyIf.concat(comando.toString());
    }

    if (!bodyIf.endsWith("\u005cn")){
      bodyIf = bodyIf + "\u005cn";
    }

    return bodyIf + "}\u005cn";
  }
}

class While extends Comando {
  Expression teste;
  ArrayList<Comando> comandos;

  While(Expression teste, ArrayList<Comando> comandos){
    this.teste = teste;
    this.comandos = comandos;
  }

  public String toString() {
    String bodyWhile = "while (" + this.teste.toString() + "){\u005cn";

    for (Comando comando : this.comandos) {
      bodyWhile = bodyWhile.concat(comando.toString());
    }

    if (!bodyWhile.endsWith("\u005cn")){
      bodyWhile = bodyWhile + "\u005cn";
    }

    return bodyWhile + "}\u005cn";
  }
}

class Repeat extends Comando {
  Expression teste;
  ArrayList<Comando> comandos;

  Repeat(Expression teste, ArrayList<Comando> comandos){
    this.teste = teste;
    this.comandos = comandos;
  }

  public String toString() {
    String bodyRepeat = "while (!(" + this.teste.toString() + ")){\u005cn";

    for (Comando comando : this.comandos) {
      bodyRepeat = bodyRepeat.concat(comando.toString());
    }

    if (!bodyRepeat.endsWith("\u005cn")){
      bodyRepeat = bodyRepeat + "\u005cn";
    }

    return bodyRepeat + "}\u005cn";
  }
}

class Return extends Comando {
  Expression exp;

  Return(Expression exp){
    this.exp = exp;
  }

  public String toString() {
    return "return " + this.exp.toString() + ";\u005cn";
  }
}

class Print extends Comando {
  Expression exp;

  Print(Expression exp){
    this.exp = exp;
  }

  public String toString() {
    return "console.log(" + this.exp.toString() + ");\u005cn";
  }
}

class FunCallComand extends Comando {
  FunCall funCall;

  FunCallComand(FunCall funCall){
    this.funCall = funCall;
  }

  public String toString() {
    return this.funCall.toString() + "\u005cn";
  }
}

class Main {
  ArrayList<Variable> variables;
  ArrayList<Comando> comandos;

  Main(ArrayList<Variable> variables, ArrayList<Comando> comandos){
    this.variables = variables;
    this.comandos = comandos;
  }

  public String toString() {
    String bodyMain = "function main(){\u005cn";

    for (Variable var : this.variables) {
      bodyMain = bodyMain.concat("let " + var.toString() + ";\u005cn");
    }

    for (Comando comando : this.comandos) {
      bodyMain = bodyMain.concat(comando.toString());
    }

    if (!bodyMain.endsWith("\u005cn")){
      bodyMain = bodyMain + "\u005cn";
    }

    return bodyMain + "}\u005cn";
  }
}

class Argumento {
  String nome;
  Type type;

  Argumento(String nome, Type type){
    this.nome = nome;
    this.type = type;
  }

  public String toString() {
    return this.nome.toString();
  }
}


class Funcao {
  String nome;
  Type type_return;
  ArrayList<Argumento> argumentos;
  ArrayList<Variable> variables;
  ArrayList<Comando> comandos;

  Funcao(String nome, Type typr_return, ArrayList<Argumento> argumentos, ArrayList<Variable> variables, ArrayList<Comando> comandos){
    this.nome = nome;
    this.type_return = type_return;
    this.argumentos = argumentos;
    this.variables = variables;
    this.comandos = comandos;
  }

  public String toString() {
    String bodyFun = "function " + this.nome + "(";

    if (!this.argumentos.isEmpty()) {

      Argumento first = this.argumentos.remove(0);
      bodyFun = bodyFun.concat(first.toString());

      for (Argumento argumento : this.argumentos) {
        bodyFun = bodyFun.concat("," + argumento.toString());
      }

      argumentos.add(0, first);
    }

    bodyFun = bodyFun.concat(") {\u005cn");

    for (Variable var : this.variables) {
      bodyFun = bodyFun.concat("let " + var.toString() + ";\u005cn");
    }

    for (Comando comando : this.comandos) {
      bodyFun = bodyFun.concat(comando.toString());
    }

    if (!bodyFun.endsWith("\u005cn")){
      bodyFun = bodyFun + "\u005cn";
    }

    return bodyFun + "}\u005cn";
  }
}

//===================================================================================================================================================
//===================================================================================================================================================
//===================================================================================================================================================


class KarloffA {
  Main main;
  ArrayList<Funcao> funcoes;

  KarloffA(Main main, ArrayList<Funcao> funcoes) {
    this.main = main;
    this.funcoes = funcoes;
  }

  public String toString() {
    String body = "";
    body = body.concat(this.main.toString() + "\u005cn");

    for (Funcao funcao : this.funcoes) {
      body = body.concat(funcao.toString() + "\u005cn");
    }

    if (GlobalFlag.isGlobalFlag() == true){
      body = body.concat("const readlineSync = require('readline-sync');//Para permitir leitura no terminal\u005cn\u005cn");
    }

    body = body + "main();\u005cn";

    return body;
  }
}

public class Karloff implements KarloffConstants {
  public static void main(String args[]) throws Exception {
    FileInputStream fs;
    String filename = "output.js";

    if (args.length < 1 || args.length > 2){
      System.out.println("Voc\u00ea precisa informar o nome do arquivo de entrada e o de sa\u00edda: java Karloff <entrada.kar> <sa\u00edda.js>");
      System.exit(0);
    }

    fs = new FileInputStream(new File(args[0]));
    filename = new String(args[1]);

    Karloff parser = new Karloff(fs);

    KarloffA arvore = parser.Karloff();

    geraCodigo(arvore, filename);
  }

  public static void geraCodigo(KarloffA prog, String filename) throws Exception {
    File file = new File(filename);

    FileOutputStream outputStream = new FileOutputStream(file);
    outputStream.write(prog.toString().getBytes());

    outputStream.close();
  }

//===================================================================================================================================================
//===================================================================================================================================================
//===================================================================================================================================================
  static final public KarloffA Karloff() throws ParseException {
    Main main;
    ArrayList<Funcao> funcoes = new ArrayList<Funcao>();
    main = MainK();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALLFUNC:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      CallFunc(funcoes);
    }
    jj_consume_token(0);
     {if (true) return new KarloffA(main, funcoes);}
    throw new Error("Missing return statement in function");
  }

  static final public Main MainK() throws ParseException {
  ArrayList<Variable> variables = new ArrayList<Variable>();
  ArrayList<Comando> comandos = new ArrayList<Comando>();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    VarDecl(variables);
    SeqComandos(comandos);
    jj_consume_token(FCHAVES);
    {if (true) return new Main(variables, comandos);}
    throw new Error("Missing return statement in function");
  }

  static final public void VarDecl(ArrayList<Variable> variables) throws ParseException {
 Token t;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWVAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(NEWVAR);
      Type();
      t = jj_consume_token(ID);
                             variables.add(new Variable(t.image));
      jj_consume_token(SEMICOLON);
    }
  }

  static final public Type Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
           {if (true) return new Type("int");}
      break;
    case BOOL:
      jj_consume_token(BOOL);
            {if (true) return new Type("bool");}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void SeqComandos(ArrayList<Comando> comandos) throws ParseException {
  Comando comando;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case REPEAT:
      case RETURN:
      case SAIDA:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      comando = Comando();
                        comandos.add(comando);
      jj_consume_token(SEMICOLON);
    }
  }

  static final public Comando Comando() throws ParseException {
  Token t;
  Comando comando;
  Expression test;
  Expression exp;
  ArrayList<Comando> comandos = new ArrayList<Comando>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      comando = ComandoL(t);
                                {if (true) return comando;}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(APAR);
      test = Exp();
      jj_consume_token(FPAR);
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      SeqComandos(comandos);
      jj_consume_token(FCHAVES);
                                                                                     {if (true) return new If(test, comandos);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(APAR);
      test = Exp();
      jj_consume_token(FPAR);
      jj_consume_token(ACHAVES);
      SeqComandos(comandos);
      jj_consume_token(FCHAVES);
                                                                                 {if (true) return new While(test, comandos);}
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      jj_consume_token(ACHAVES);
      SeqComandos(comandos);
      jj_consume_token(FCHAVES);
      jj_consume_token(UNTIL);
      jj_consume_token(APAR);
      test = Exp();
      jj_consume_token(FPAR);
                                                                                          {if (true) return new Repeat(test, comandos);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
      exp = Exp();
                         {if (true) return new Return(exp);}
      break;
    case SAIDA:
      jj_consume_token(SAIDA);
      jj_consume_token(APAR);
      exp = Exp();
      jj_consume_token(FPAR);
                                      {if (true) return new Print(exp);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoL(Token t) throws ParseException {
  Comando comando;
  ArrayList<Expression> listaExp = new ArrayList<Expression>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTRIB:
      jj_consume_token(ATTRIB);
      comando = ComandoLL(t);
                                 {if (true) return comando;}
      break;
    case APAR:
      jj_consume_token(APAR);
      ListaExp(listaExp);
      jj_consume_token(FPAR);
                                    {if (true) return new FunCallComand(new FunCall(t.image, listaExp));}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoLL(Token t) throws ParseException {
  Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case APAR:
    case NUM:
    case ID:
      exp = Exp();
             {if (true) return new AtribExp(t.image, exp);}
      break;
    case ENTRADA:
      jj_consume_token(ENTRADA);
      jj_consume_token(APAR);
      jj_consume_token(FPAR);
                           {if (true) return new AtribInput(t.image);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Exp() throws ParseException {
  Expression left;
  Expression right;
  Operator op;
  Factor f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      left = Exp();
      op = Op();
      right = Exp();
      jj_consume_token(FPAR);
                                                    {if (true) return new Operation(op, left, right);}
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      f = Factor();
                {if (true) return new ExpressionFinal(f);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Factor Factor() throws ParseException {
  Token t;
  ArrayList<Expression> listaExp = new ArrayList<Expression>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
        jj_consume_token(APAR);
        ListaExp(listaExp);
        jj_consume_token(FPAR);
                                                {if (true) return new FunCall(t.image, listaExp);}
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                                                                                          {if (true) return new Variable(t.image);}
      break;
    case NUM:
      t = jj_consume_token(NUM);
             {if (true) return new Num(t.image);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
            {if (true) return new True();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
             {if (true) return new False();}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Operator Op() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
      jj_consume_token(SUM);
           {if (true) return new Sum();}
      break;
    case SUB:
      jj_consume_token(SUB);
           {if (true) return new Sub();}
      break;
    case MULT:
      jj_consume_token(MULT);
            {if (true) return new Mult();}
      break;
    case DIV:
      jj_consume_token(DIV);
           {if (true) return new Div();}
      break;
    case AND:
      jj_consume_token(AND);
           {if (true) return new And();}
      break;
    case OR:
      jj_consume_token(OR);
          {if (true) return new Or();}
      break;
    case BIGGER:
      jj_consume_token(BIGGER);
              {if (true) return new Bigger();}
      break;
    case SMALLER:
      jj_consume_token(SMALLER);
               {if (true) return new Smaller();}
      break;
    case COMPARE:
      jj_consume_token(COMPARE);
               {if (true) return new Compare();}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ListaExp(ArrayList<Expression> listaExp) throws ParseException {
  Expression exp;
    exp = Exp();
               listaExp.add(exp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      ListaExpL(listaExp);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void ListaExpL(ArrayList<Expression> listaExp) throws ParseException {
 Expression exp;
    jj_consume_token(COLON);
    exp = Exp();
                     listaExp.add(exp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      ListaExpL(listaExp);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void CallFunc(ArrayList<Funcao> funcoes) throws ParseException {
  Type T_return;
  Token t;
  ArrayList<Argumento> argumentos = new ArrayList<Argumento>();
  ArrayList<Variable> variables = new ArrayList<Variable>();
  ArrayList<Comando> comandos = new ArrayList<Comando>();
    jj_consume_token(CALLFUNC);
    T_return = Type();
    t = jj_consume_token(ID);
    jj_consume_token(APAR);
    ListaArg(argumentos);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    VarDecl(variables);
    SeqComandos(comandos);
    jj_consume_token(FCHAVES);
   funcoes.add(new Funcao(t.image, T_return, argumentos, variables, comandos));
  }

  static final public void ListaArg(ArrayList<Argumento> argumentos) throws ParseException {
  Token t;
  Type type;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      type = Type();
      t = jj_consume_token(ID);
                         argumentos.add(new Argumento(t.image, type));
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        jj_consume_token(COLON);
        type = Type();
        t = jj_consume_token(ID);
                                                                                                     argumentos.add(new Argumento(t.image, type));
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KarloffTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x80000,0x180,0xda00,0xda00,0x4800000,0x870000,0x860000,0x800000,0x60000,0xf8000000,0x0,0x0,0x180,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x40,0x40,0x0,0x60,0x60,0x0,0x60,0xf,0x10,0x10,0x0,0x10,};
   }

  /** Constructor with InputStream. */
  public Karloff(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Karloff(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Karloff(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Karloff(KarloffTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KarloffTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
